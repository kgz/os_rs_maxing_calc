import React, { useState, useRef, useEffect } from 'react';
import styles from './CustomSelect.module.css';

export interface CustomSelectProps<T> {
    options: T[];
    value: T;
    onChange: (value: T, index: number) => void;
    getOptionLabel: (option: T) => string;
    getOptionValue?: (option: T) => string | number;
    renderOption?: (option: T, isSelected: boolean) => React.ReactNode;
    renderSelectedValue?: (option: T) => React.ReactNode;
    placeholder?: string;
    disabled?: boolean;
    showSearch?: boolean;
    searchFn?: (option: T, searchText: string) => boolean;
    searchPlaceholder?: string;
}

function CustomSelect<T>({
    options,
    value,
    onChange,
    getOptionLabel,
    getOptionValue = (option: T) => getOptionLabel(option),
    renderOption,
    renderSelectedValue,
    placeholder = 'Select...',
    disabled = false,
    showSearch = false,
    searchFn = (option: T, searchText: string) =>
        getOptionLabel(option).toLowerCase().includes(searchText.toLowerCase()),
    searchPlaceholder = 'Search...'
}: CustomSelectProps<T>) {
    const [isOpen, setIsOpen] = useState(false);
    const [searchText, setSearchText] = useState('');
    const [dropdownPosition, setDropdownPosition] = useState&lt;'bottom' | 'top'&gt;('bottom');
    const selectRef = useRef&lt;HTMLDivElement&gt;(null);
    const dropdownRef = useRef&lt;HTMLDivElement&gt;(null);
    const searchInputRef = useRef&lt;HTMLInputElement&gt;(null);

    // Close dropdown when clicking outside
    useEffect(() => {
        function handleClickOutside(event: MouseEvent) {
            if (selectRef.current &amp;&amp; !selectRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        }

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);

    // Focus search input when dropdown opens
    useEffect(() => {
        if (isOpen &amp;&amp; showSearch &amp;&amp; searchInputRef.current) {
            setTimeout(() => {
                searchInputRef.current?.focus();
            }, 10);
        }
    }, [isOpen, showSearch]);

    // Reset search when dropdown closes
    useEffect(() => {
        if (!isOpen) {
            setSearchText('');
        }
    }, [isOpen]);

    // Determine dropdown position when opening
    useEffect(() => {
        if (isOpen &amp;&amp; selectRef.current) {
            const selectRect = selectRef.current.getBoundingClientRect();
            const viewportHeight = window.innerHeight;
            const spaceBelow = viewportHeight - selectRect.bottom;
            const spaceNeeded = dropdownRef.current?.offsetHeight || 300; // Fallback to 300px if not yet rendered
            
            setDropdownPosition(spaceBelow &lt; spaceNeeded &amp;&amp; selectRect.top &gt; spaceNeeded ? 'top' : 'bottom');
        }
    }, [isOpen]);

    const handleSelect = (option: T, index:number) => {
        onChange(option, index);
        setIsOpen(false);
    };

    const toggleDropdown = () => {
        if (!disabled) {
            setIsOpen(!isOpen);
        }
    };

    const isOptionSelected = (option: T) => {
        return getOptionValue(option) === getOptionValue(value);
    };

    const filteredOptions = showSearch &amp;&amp; searchText
        ? options.filter(option => searchFn(option, searchText))
        : options;

    const handleSearchChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) => {
        setSearchText(e.target.value);
    };

    const handleSearchKeyDown = (e: React.KeyboardEvent) => {
        // Prevent dropdown from closing when typing in search box
        e.stopPropagation();
    };

    return (
        <div
            className={`${styles.selectContainer} ${disabled ? styles.disabled : ''}`}
            ref={selectRef}
        >
            <div
                className={`${styles.selectControl} ${isOpen ? styles.open : ''}`}
                onClick={toggleDropdown}
            >
                {value ? (
                    renderSelectedValue ? (
                        renderSelectedValue(value)
                    ) : (
                        <div className={styles.selectedValue}>{getOptionLabel(value)}</div>
                    )
                ) : (
                    <div className={styles.placeholder}>{placeholder}</div>
                )}
                <div className={styles.arrow}>â–¼</div>
            </div>

            {isOpen &amp;&amp; (
                <div 
                    ref={dropdownRef}
                    className={`${styles.dropdown} ${dropdownPosition === 'top' ? styles.dropdownTop : ''}`}
                >
                    {showSearch &amp;&amp; (
                        <div className={styles.searchContainer} onClick={(e) => e.stopPropagation()}>
                            <input
                                ref={searchInputRef}
                                type="text"
                                className={styles.searchInput}
                                value={searchText}
                                onChange={handleSearchChange}
                                onKeyDown={handleSearchKeyDown}
                                placeholder={searchPlaceholder}
                                autoComplete="off"
                            />
                        </div>
                    )}

                    {filteredOptions.length &gt; 0 ? (
                        filteredOptions.map((option, index) => (
                            <div
                                key={`${getOptionValue(option)}-${index}`}
                                className={`${styles.option} ${isOptionSelected(option) ? styles.selected : ''}`}
                                onClick={() => handleSelect(option, index)}
                            >
                                {renderOption ? (
                                    renderOption(option, isOptionSelected(option))
                                ) : (
                                    getOptionLabel(option)
                                )}
                            </div>
                        ))
                    ) : (
                        <div className={styles.noOptions}>No options found</div>
                    )}
                </div>
            )}
        </div>
    );
}

export default CustomSelect;